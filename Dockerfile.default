# Stage 1: Build stage
FROM golang:alpine3.19 as builder

WORKDIR /build

# Set the Go module cache directory
RUN go env -w GOMODCACHE=/root/.cache/go-build

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download dependencies. Dependencies will be cached if go.mod and go.sum are not changed
# RUN --mount=type=cache,target=/root/.cache/go-build go mod download

# Copy the source code
COPY . .

# Run go mod vendor to create the vendor directory
RUN --mount=type=cache,target=/root/.cache/go-build go mod vendor

# Build the Go app
RUN --mount=type=cache,target=/root/.cache/go-build go build -o /bin/app .

# Stage 2: Final lightweight stage
FROM alpine:3.19.1

# Copy the binary from builder stage to the final stage
COPY --from=builder /bin/app /bin/app

# Copy the vendor directory from the builder stage to the final stage
COPY --from=builder /build/vendor /vendor

# Expose port 8080
EXPOSE 8080

# Command to run the executable
CMD ["/bin/app"]
